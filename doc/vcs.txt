*vcs.txt*

-----------------------------------------------------------------------------
Version Control System Commands                  *vcs*

  Commands                       |vcs-commands|
  Web Commands                   |vcs-webcommands|
  Vcs Editor                     |vcs-editor|
  Configuration                  |vcs-configuration|

-----------------------------------------------------------------------------
Vcs Commands                                     *vcs-commands*

The following is a list of commands that may be execute when viewing a
versioned file:

- *:VcsInfo* -
  Echos vcs info about the currently versioned file.

- *:VcsLog* -
  Opens a buffer with log information for the current file. In this buffer you
  can expand individual log entries (by hitting <Enter>) to view more detail
  and perform various operations (diff, annotate, etc.) using any of the text
  links denoted by '|link name|' (ex.  '|diff previous|').

- *:VcsLogGrepMessage* pattern - Like |:VcsLog| but supports a regex pattern
  for git, or a keyword or phrase for hg, which is used to limit log entries
  to those whose log message match that pattern, keyword, or phrase.

- *:VcsLogGrepFiles* pattern - Like |:VcsLogGrepMessage| but supports a regex
  pattern which is used to limit log entries to those that have files whose
  changes match the supplied pattern.

- *:VcsDiff* [revision] -
  Performs a vertical diffsplit of the current file against the last committed
  revision of the current file or the revision supplied. The special revision
  "prev" can be used to open a diff against the previous repository version.

- *:VcsCat* [revision] -
  Splits the current file with the contents of the last committed version of
  the current file or the supplied revision. The special revision "prev" can be
  used to view the file contents from the previous repository version.

- *:VcsAnnotate* -
  This command will run annotate / blame and visually annotate the current file
  via vim's sign support.  Due to vim limiting sign text to a maximum of two
  characters, the sign text will be the the user's initials or the first two
  characters of the username.  This command will also create a CursorMoved
  event which will echo the version number and full author name for the
  current annotated line.

  Running this command on an already annotated file removes all annotations and
  disables the CursorMoved event.

- *:VcsAnnotateCat* -
  Like |:VcsCat| but use the annotated revision of the line under the cursor.
  This command is only available while in |:VcsAnnotate| mode.

- *:VcsAnnotateDiff* -
  Like |:VcsDiff| but use the annotated revision of the line under the cursor.
  This command is only available while in |:VcsAnnotate| mode.

-----------------------------------------------------------------------------
Vcs Editor Support                               *vcs-editor*

Git supports using vim as the default editor for composing commit messages and
when composing the message there is a list of files to be committed.  This
plugin hooks into that support allowing you to hit <enter> on one of the files
to view a diff of the version to be committed against the last committed
version, or in the case of newly added files, view the file to be added.

Note: Issuing a 'git commit' from any directory other than the root
of your working copy may lead to errors when attempting to view a diff or file
in the editor.  This is due to git changing the working directory to the root
but leaving the displayed file paths as relative, preventing the vcs plugin
from being able to determine where those files reside.  To resolve this issue
you will need to run the following to configure git to always display the full
path:

>
  $ git config --global status.relativePaths false

Another option is to create a git-commit-abs script in your path which
temporarily sets the above setting and then use 'git commit-abs <args>' or
create a git alias like the example below which lets you use 'git ci <args>'
instead:

>
  $ echo -e '#!/bin/bash\ngit -c status.relativePaths=false commit "$@"' \
    > /usr/bin/git-commit-abs
  $ chmod 755 /usr/bin/git-commit-abs
  $ git config --global alias.ci commit-abs


-----------------------------------------------------------------------------
Configuration                                    *vcs-configuration*

Vim Settings

- *g:VcsLogMaxEntries* (Default: 0) -
  When greater than 0, limits the number of log entries retrieved by
  |:VcsLog|.

- *g:VcsDiffOrientation* (Default: 'vertical') -
  When initiating diffs, this setting controls whether the diff window is
  opened as a horizontal split or vertical.  Supported values include
  'horizontal' and 'vertical'.

- *g:VcsBrowser* (Default: none) -
  When set, overrides the vcs browser discovery and uses this value instead.

- *g:VcsRepositorySettings* (Default: {}) -
  This is a dictionary of vcs repository root directories to a dictionary of
  settings for that repository.

  The supported repository settings include:
    - patterns: Dictionary of vim regular expressions to the url used to open
      the proper ticket in the ticketing system.

      The key for each entry is a vim regex where the first group in each
      pattern must correspond to the tracker ticket id.  That portion of the
      match will be substituted into the '<id>' placeholder of the tracker url
      the pattern is mapped to.

      The value for each entry is the cooresponding url to your online
      tracking system where the '<id>' is used as the placeholder of the
      ticket id pulled using the pattern mapped to this url.

  Example:
    >
      let g:VcsRepositorySettings = {
          \ '~/files/development/vim/vcs': {
            \ 'patterns': {
              \ '#\(\d\+\)': 'https://github.com/ervandew/vcs/issues#issue/<id>'
            \ }
          \ }
        \ }

vim:tw=78:ft=help:norl:
